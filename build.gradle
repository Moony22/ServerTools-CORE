import org.ajoberstar.grgit.Grgit

import java.text.DateFormat
import java.text.SimpleDateFormat

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name 'Forge'
            url 'http://files.minecraftforge.net/maven'
        }
        maven {
            name 'SonaType-Snapshots'
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath 'org.ajoberstar:gradle-git:0.10.1'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
    }
}

apply plugin: 'forge'
apply plugin: 'license'
apply plugin: 'curseforge'
apply plugin: 'license'

version = new ProjectVersion(
        minecraft: '1.8',
        forge: '11.14.1.1325',

        major: '2',
        minor: '3',
        revision: '0',

        mappings: 'stable_16'
)

apply from: 'gradle/maven.gradle'

println "\n$name version: $version\n"

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

minecraft {
    version = "$project.version.minecraft-$project.version.forge"
    mappings = project.version.mappings
    runDir = 'run'

    replaceIn 'info/servertools/core/Version.java'

    replace '@MAJOR@': project.version.major
    replace '@MINOR@': project.version.minor
    replace '@REV@': project.version.revision
    replace '@BUILD@': project.version.build
}

processResources {

    from 'LICENSE'

    rename '(.+_at.cfg)', 'META-INF/$1'

    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        include '**/*.properties'

        expand([
                'version'    : project.version,
                'mcversion'  : project.version.minecraft,
                'url'        : project.url,
                'description': project.description
        ])
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
        exclude '**/*.properties'
    }
}

license {
    ext.name = project.name
    ext.organization = project.organization
    ext.year = project.inceptionYear
    ext.url = project.url
    exclude '**/*.info'
    exclude '**/*.properties'
    exclude '**/*.cfg'
    header = file('HEADER.txt')
    sourceSets = project.sourceSets
    ignoreFailures = false
    strictCheck = true
    mapping { java = 'SLASHSTAR_STYLE' }
}



DateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZZ")
format.setTimeZone(TimeZone.getTimeZone("UTC"))

def commonManifest = [
        'Built-By'              : System.getProperty('user.name'),
        'Built-At'              : format.format(new Date()),
        'Created-By'            : "${System.getProperty('java.version')} (${System.getProperty('java.vendor')})",
        'Implementation-Title'  : project.name,
        'Implementation-Version': project.version,
        'Version-Major'         : project.version.major,
        'Version-Minor'         : project.version.minor,
        'Version-Revision'      : project.version.revision,
        'Version-Build'         : project.version.build,
        'Git-Hash'              : project.version.gitHash,
        'Minecraft-Version'     : project.version.minecraft,
        'Forge-Version'         : project.version.forge,
        'FMLAT'                 : 'servertools_at.cfg'
]

logger.info "Manifest:\n$commonManifest\n"

jar {
    manifest.mainAttributes(commonManifest)
}

task sourcesJar(type: Jar) {
    manifest.mainAttributes(commonManifest)
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    manifest.mainAttributes(commonManifest)
    from javadoc.destinationDir
    classifier = 'javadoc'
}

task deobfJar(type: Jar) {
    manifest.mainAttributes(commonManifest)
    from sourceSets.main.output
    classifier = 'deobf'
}

task versionProperties << {
    def infoFile = new File("$buildDir/resources/main/version.properties")
    infoFile.getParentFile().mkdirs()
    Properties props = new Properties()
    props.setProperty('ServerTools.version', project.version.toString())
    props.store(infoFile.newWriter(), null)
}

assemble.dependsOn sourcesJar, javadocJar, deobfJar
processResources.dependsOn versionProperties

tasks.withType(JavaCompile) { task ->
    task.options.encoding = 'UTF-8'
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
    archives deobfJar
}

curse {
    dependsOn build
    mustRunAfter uploadArchives
    onlyIf { return project.hasProperty('curseforge_key') }
    if (project.hasProperty('curseforge_key')) {
        apiKey = project.curseforge_key
    }

    projectId = '64744'
    changelog = project.hasProperty('changelog') ? project.changelog : ''
    releaseType = project.hasProperty('releaseType') ? project.releaseType : 'alpha'

    additionalArtifact sourcesJar, javadocJar, deobfJar
}

task clean(type: Delete, overwrite: true) {
    file(buildDir).eachFile { file ->
        if (!'dirtyArtifacts'.equals(file.getName())) {
            delete file
        }
    }
}

task cleanAll(type: Delete) {
    delete buildDir
}

class ProjectVersion {

    String forge, minecraft
    String major, minor, revision
    String build = System.getenv().BUILD_NUMBER != null ? System.getenv().BUILD_NUMBER : '0'

    String gitHash = getGitHash()

    String mappings

    @Override
    String toString() {
        if (!'0'.equals(build)) {
            return "$minecraft-$major.$minor.$revision.$build"
        } else {
            return "$minecraft-$major.$minor.$revision.$gitHash"
        }
    }

    static String getGitHash() {
        if (new File('.git').exists()) {
            Grgit repo = Grgit.open('.')
            return repo.log().find().abbreviatedId
        } else {
            return 'none'
        }
    }
}
